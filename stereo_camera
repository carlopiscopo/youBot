#include "youbot/YouBotBase.hpp"
#include "youbot/YouBotManipulator.hpp"
#include "youbot/YouBotGripper.hpp"

using namespace youbot;

double timer1 = 8000;

int main() {

	/* configuration flags for different system configuration (e.g. base without arm)*/
	bool youBotHasBase = false;
	bool youBotHasArm = false;

	/* define velocities */
	double translationalVelocity = 0.1;   //0.05; //meter_per_second
	double rotationalVelocity = 0.2; //radian_per_second

	/* create handles for youBot base and manipulator (if available) */
	YouBotBase* myYouBotBase = 0;
	YouBotManipulator* myYouBotManipulator = 0;

	try {
		myYouBotBase = new YouBotBase("youbot-base", YOUBOT_CONFIGURATIONS_DIR);
		myYouBotBase->doJointCommutation();

		youBotHasBase = true;
	} catch (std::exception& e) {
		LOG(warning) << e.what();
		youBotHasBase = false;
	}

	try {
		myYouBotManipulator = new YouBotManipulator("youbot-manipulator", YOUBOT_CONFIGURATIONS_DIR);
		myYouBotManipulator->doJointCommutation();
		myYouBotManipulator->calibrateManipulator();

		youBotHasArm = true;
	} catch (std::exception& e) {
		LOG(warning) << e.what();
		youBotHasArm = false;
	}

	try {
		myYouBotManipulator = new YouBotManipulator("youbot-manipulator", YOUBOT_CONFIGURATIONS_DIR);
		myYouBotManipulator->calibrateGripper();

	} catch (std::exception& e) {
		LOG(warning) << e.what();
	}


	try {
		/*
		 * Simple sequence of commands to the youBot:
		 */

		if (youBotHasBase) {

			// We used the joypad for base movement

	}


		if (youBotHasArm) {

			gripperSetPoint.barSpacing = 0 * meter;    // finger close
			myYouBotManipulator->getArmGripper().setData(gripperSetPoint);
			LOG(info) << "Finger Close";
			SLEEP_MILLISEC(timer1);

			gripperSetPoint.barSpacing = 0.00575 * meter;    // finger open 2.5mm
			myYouBotManipulator->getArmGripper().setData(gripperSetPoint);
			LOG(info) << "Finger In Mid";
			SLEEP_MILLISEC(timer1);

			gripperSetPoint.barSpacing = 0.0115 * meter;    // finger open 5mm
			myYouBotManipulator->getArmGripper().setData(gripperSetPoint);
			LOG(info) << "Finger In Open Position";
			SLEEP_MILLISEC(timer1);



			}

		}

		

	} catch (std::exception& e) {
		std::cout << e.what() << std::endl;
		std::cout << "unhandled exception" << std::endl;
	}

	/* clean up */
	if (myYouBotBase) {
		delete myYouBotBase;
		myYouBotBase = 0;
	}
	if (myYouBotManipulator) {
		delete myYouBotManipulator;
		myYouBotManipulator = 0;
	}

	LOG(info) << "Done.";	

	return 0;
	}

